class MixedQueue {
  def enqueue(e : E) = {
    if (e == null) {
      return
    }

    begin : while (true) {
      val t = tail
      val n = t.next
      if (n == null) {
        var i = 0
        while (t.elements[i] != null) {
          i += 1
          if (i == t.elements.size) {
            val n_ = new Node(e, null)
            if (CAS(tail.next, null, n_) {
              return
            } else {
              goto begin // try again.
            }
          }
        }
        if (CAS(t.elements[i], null, e)) {
          return
        }
      } else {
        CAS(tail, t, n)
      }
    }
  }

  def dequeue() = {
    begin : while (true) {
      val h = head
      val t = tail
      val nh = h.next
      val nt = t.next
      if (h == t) {
        if (nh == null) {
          return false
        }
        CAS(tail, t, nh) // Tail is falling behind.  Try to advance it
      } else {
        var i = 0
        var v
        while ((v = nh.elements[i]) == DELETED) {
          i += 1
          if (i == nh.elements.size) {
            goto begin // All the elements of this node have been deleted : node has been deleted.
          }
        }
        if (i != nh.elements.size - 1) {
          if (CAS(nh.elements[i], v, DELETED)) {
            return
          }
        } else { // if the element being removed is the last element of the node...
          if (CAS(head, h, nh)) {
            h.elements[h.elements.size - 1] = DELETED
          }
        }
      }
    }
  }

  var head : Node
  var tail : Node
}

class Node {
  def this(e : E, n : Node) = {
    elements = new Array[E](ARRAY_SIZE)
    elements[0] = e
    next = n
  }

  val elements : Array[E]
  var next : Node
  static val ARRAY_SIZE = 10
}

